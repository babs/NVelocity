<?xml version="1.0" encoding="utf-8"?>

<!--
***********************************************************************************************

	Main build script

Copyright 2004-2010 Castle Project - http://www.castleproject.org/

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
***********************************************************************************************
-->

<Project DefaultTargets="BuildProject" InitialTargets="CheckRequiredProperties" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
	
	<!-- Root Path definition relative for actual build file -->
	<PropertyGroup>
		<RootPath Condition="'$(RootPath)' == ''">$(MSBuildProjectDirectory)/..</RootPath>
	</PropertyGroup>


	<!-- Import common targets -->
	<Import Project="$(RootPath)/Settings.proj" />
	<Import Project="$(BuildScriptsPath)/Castle.Common.Targets" />
	<Import Project="$(MSBuildBinPath)/Microsoft.CSharp.Targets" Condition="($(MSBuildTargets) == '') Or ($(MSBuildTargets) == 'CSharp')" />


	<Target Name="CheckRequiredProperties">
		<Error Condition="'$(ProjectName)' == ''" Text="The ProjectName property has not been set, please set it in Settings.proj." />
		<Error Text="The tools version &quot;$(MSBuildToolsVersion)&quot; is not supported, MSBuild 4.0 or newer is required to build." Condition="'$(MSBuildToolsVersion)' != '4.0'" />
	</Target>
		

	<UsingTask
		TaskName="NCover.MSBuildTasks.NCover"
		AssemblyFile="$(NCoverPath)/Build Task Plugins/NCover.MSBuildTasks.dll"
		Condition="$(TestRunner_EnableCoverage)" />

	
	<!--
		Public targets
	-->
	
	<Target
		Name="BuildProject"
		>

		<MSBuild Projects="$(SolutionPath)" Targets="Build" Properties="OutputPath=$(OutputPath);Configuration=$(Configuration)$(BuildFramework);BuildConstants=$(BuildConstants);MSBuildTargets=$(MSBuildTargets);TargetFrameworkVersion=$(TargetFrameworkVersion);TargetFrameworkProfile=$(TargetFrameworkProfile)">

			<Output TaskParameter="TargetOutputs" ItemName="AllBinaries" />
		
		</MSBuild>
		
		<PropertyGroup>
			<TestDetectionExpression>.[\.]((Integration|Unit)?Test[s]{0,1}?)</TestDetectionExpression>
		</PropertyGroup>

		<!-- Resolve test projects -->
		<RegexMatch Input="@(AllBinaries)" Expression="$(TestDetectionExpression)">
			<Output TaskParameter="Output" ItemName="TestAssemblies" />
		</RegexMatch>

		<!-- Resolve the libraries code projects -->
		<ItemGroup>
			<AppAssemblies Include="@(AllBinaries)" Exclude="@(TestAssemblies)" />
		</ItemGroup>

		<!-- Pick up the PDB files. This is kind of hard coded to the location of the AppAssemblies, but I currently don't see another way  -->
		<ItemGroup>
			<PdbFiles
				Include="@(AppAssemblies->'%(RelativeDir)%(FileName).pdb')" />
		</ItemGroup>

		<!-- Pick up the documentation XML. This is kind of hard coded to the location of the AppAssemblies, but I currently don't see another way  -->
		<ItemGroup>
			<DocumentationFiles
				Include="@(AppAssemblies->'%(RelativeDir)%(FileName).xml')"
				Condition="Exists('%(AppAssemblies.RelativeDir)%(AppAssemblies.FileName).xml')"  />
		</ItemGroup>

	</Target>

	
	<Target Name="RebuildAll" DependsOnTargets="CleanAll;BuildProject" />
	<Target Name="ClickToBuild" DependsOnTargets="RebuildAll;_SetPackageDir;_PreparePackage">
		<RemoveDir Directories="$(OutputPath)" />
	</Target>

	<Target Name="_SetPackageDir">
		<PropertyGroup>
			<PackageDir>$(OutputPath)../Library</PackageDir>
		</PropertyGroup>
	</Target>

	<Target Name="CleanProject">
		<MSBuild Projects="$(SolutionPath)" Targets="Clean" Properties="Configuration=$(Configuration)$(BuildFramework);BuildConstants=$(BuildConstants);MSBuildTargets=$(MSBuildTargets);TargetFrameworkVersion=$(TargetFrameworkVersion)" />

		<CreateItem Include="**/Debug/**/*.*;**/Release/**/*.*">
			<Output ItemName="_binaryFiles" TaskParameter="Include"/>
		</CreateItem>
		<Delete Files="@(_binaryFiles)" TreatErrorsAsWarnings="true"/>
		<RemoveDir Directories="$(OutputPath)" />
	</Target>


	<Target Name="CleanAll">
		<MSBuild Projects="$(SolutionPath)" Targets="Clean" Properties="Configuration=$(Configuration)$(BuildFramework);BuildConstants=$(BuildConstants);MSBuildTargets=$(MSBuildTargets);TargetFrameworkVersion=$(TargetFrameworkVersion)" />

		<CreateItem Include="**/Debug/**/*.*;**/Release/**/*.*">
			<Output ItemName="_binaryFiles" TaskParameter="Include"/>
		</CreateItem>
		<Delete Files="@(_binaryFiles)" TreatErrorsAsWarnings="true"/>
		<Exec Command="for /f %%d in ('dir /ad /b') do rd /s /q %%d"
			WorkingDirectory="$(BuildPath)"
			Condition=" Exists('$(BuildPath)') "/>
  		<RemoveDir Directories="$(BuildPath)" Condition=" Exists('$(BuildPath)') "/>
	</Target>

	
	<Target
		Name="RunAllTests"
		DependsOnTargets="BuildProject"
		>
		
		<CallTarget Targets="_ExecTestRunner" />
	
	</Target>

	<!-- Builds the source code and creates the package -->
	<Target
	    Name="BuildAndPack"
		>
	
		<CallTarget Targets="RebuildAll" />
		
		<CallTarget Targets="Package" />
	
	</Target>
	
	<!-- Creates Zip file for Release -->
	<Target
		Name="Package"
		DependsOnTargets="CleanProject;GetBuildRevision;RunAllTests;_PreparePackage"
		>

		<PropertyGroup>
			<Build_ZipFile Condition="'$(Build_ZipFile)' == ''">$(ProjectName)-$(BuildConfigKey)-$(Build_Number).zip</Build_ZipFile>
			<Build_ZipFilePath Condition="'$(Build_ZipFilePath)' == ''">$(OutputPath)../$(Build_ZipFile)</Build_ZipFilePath>
		</PropertyGroup>

		<Message Importance="high" Text="Creating ZIP file $(Build_ZipFilePath)"/>

		<ItemGroup>
			<FilesToPackage Include="$(PackageDir)\**\*.*" Exclude="$(PackageDir)\**\*Tests*" />
		</ItemGroup>
		<Zip
			Files="@(FilesToPackage)"
			ZipLevel="6"
			WorkingDirectory="$(PackageDir)"
			ZipFileName="$(Build_ZipFilePath)"
			/>

		<RemoveDir Directories="$(PackageDir)" ContinueOnError="true" />

	</Target>
	
	<!--
	==================================================
		Internal targets
	==================================================
	-->
	<PropertyGroup>
		<TestAssemblies></TestAssemblies>
	</PropertyGroup>

	<!-- Executes NUnit or NCover with NUnit -->
	<Target
		Name="_ExecTestRunner"
		DependsOnTargets="_CreateTestResultsFolder"
		Condition="$(TestRunner_Enabled)"
		>
		
		<CallTarget Targets="_ExecNUnit" Condition="!$(TestRunner_EnableCoverage)" />
	
		<CallTarget Targets="_ExecNCover" Condition="$(TestRunner_EnableCoverage)" />

	</Target>
	

	<!-- Use TeamCity's when running on the build server -->
	<UsingTask TaskName="NUnitTeamCity" AssemblyFile="$(teamcity_dotnet_nunitlauncher_msbuild_task)" Condition=" '$(TEAMCITY_VERSION)' != '' "/>

	<Target
		Name="_ExecNUnit"
		>
		<PropertyGroup>
			<NUnitTestResultXmlFiles Condition="'$(NUnitTestResultXmlFiles)' == ''">$(TestResultsPath)/nunit-results.xml</NUnitTestResultXmlFiles>
		</PropertyGroup>
		
		<Exec Command="$(NUnitPath)/nunit-console-x86.exe /nologo @(TestAssemblies) /xml=$(NUnitTestResultXmlFiles) /framework=$(FrameworkVersion)" Condition=" '$(TEAMCITY_VERSION)' == '' " />

		<NUnitTeamCity
			Assemblies="@(TestAssemblies)"
			NUnitVersion="NUnit-2.5.5"
			Condition=" '$(TEAMCITY_VERSION)' != '' "
		/>

	</Target>

	
	<Target
		Name="_ExecNCover"
		>
		
		<PropertyGroup>
			<NCoverResultXmlFiles Condition="'$(NCoverResultXmlFiles)' == ''">$(TestResultsPath)/nunit-coverage-results.xml</NCoverResultXmlFiles>
		</PropertyGroup>

		<NCover
			ToolPath="$(NCoverPath)"
			TestRunnerExe="$(NUnitPath)/nunit-console-x86.exe"
			TestRunnerArgs="@(TestAssemblies) /noshadow"
			CoverageFile="$(NCoverResultXmlFiles)"
			ContinueOnError="$(TestRunner_ContinueOnError)"
			Timeout="$(TestRunner_Timeout)"
			>
			
			<Output TaskParameter="ExitCode" PropertyName="NCoverExitCode" />
		
		</NCover>
		
		<Error Condition="$(NCoverExitCode) != '0'" Text="NCover failed with exit code $(NCoverExitCode)." />
	
	</Target>

	
	<Target
		Name="_CreateTestResultsFolder"
		Condition="'$(TestResultsPath)' != '' And !Exists('$(TestResultsPath)')"
		>
		
		<MakeDir Directories="$(TestResultsPath)" />
	
	</Target>


	<!-- Prepare package directory -->
	<Target Name="_PreparePackage">

		<PropertyGroup>
			<PackageDir Condition="'$(PackageDir)' == ''">$(OutputPath)../pkg</PackageDir>
		</PropertyGroup>

		<RemoveDir Directories="$(PackageDir)" ContinueOnError="true" />

		<ItemGroup>
			<!-- Grab all Castle assemblies, but ignore unit test assemblies. -->
			<_CastleDependencies Include="$(OutputPath)Castle*.dll;$(OutputPath)Castle*.xml" Exclude="$(OutputPath)Castle*.Tests.dll"/>

			<_BuildScriptsTxtFiles Include="$(BuildScriptsPath)/*.txt"/>
			<_ChangesTxt Include="$(RootPath)/src/Change*.txt"/>
		</ItemGroup>

		<!-- Create list with items to be copied to package directory. The metadata <DestinationFolder> controls where they wind up. -->
		<ItemGroup>
			<CopyToPackageDirectory Include="@(_BuildScriptsTxtFiles)">
				<DestinationFolder>$(PackageDir)</DestinationFolder>
			</CopyToPackageDirectory>

			<CopyToPackageDirectory Include="@(AppAssemblies);@(PdbFiles);@(DocumentationFiles);@(_CastleDependencies);@(PackageFiles)">
				<DestinationFolder>$(PackageDir)/bin</DestinationFolder>
			</CopyToPackageDirectory>

			<CopyToPackageDirectory Include="@(_ChangesTxt)">
				<DestinationFolder>$(PackageDir)/ReleaseNotes</DestinationFolder>
			</CopyToPackageDirectory>
			
			<CopyToPackageDirectory Remove="@(ExcludeFromPackageFiles)" />
		</ItemGroup>
		
		<Copy
			SourceFiles="@(CopyToPackageDirectory)"
			DestinationFiles="@(CopyToPackageDirectory->'%(DestinationFolder)/%(RecursiveDir)%(Filename)%(Extension)')"
			/>

	</Target>


</Project>
